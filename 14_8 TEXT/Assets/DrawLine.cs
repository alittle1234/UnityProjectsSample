//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections;
using System.Collections.Generic;

namespace AssemblyCSharp
{
    public class DrawLine
    {
        static Texture2D lineTex;

        public DrawLine() {
        }

        public class MyLine{
            public float angle;
            public Rect rect;
        }
        static Dictionary<string, MyLine> myLines = new Dictionary<string, MyLine>();

        public static void drawLine(Vector2 pointA, Vector2 pointB, Color color, float width) {
            // Generate a single pixel texture if it doesn't exist
            if (lineTex == null) {
                lineTex = new Texture2D(1, 1);
                lineTex.SetPixel(0, 0, Color.white);
                lineTex.Apply();
            }
            
            // Save the current GUI matrix, since we're going to make changes to it.
            Matrix4x4 savedMatrix = GUI.matrix;
            Color savedColor = GUI.color;
            GUI.color = color;
            float angle;
            Rect rect;
//            string key = pointA + " + " + pointB + " + " + width;
//            if(myLines.ContainsKey(key)){
//                angle = myLines[key].angle;
//                rect = myLines[key].rect;
//            }else{
                angle = Mathf.Atan2(pointB.y-pointA.y, pointB.x-pointA.x)*180f/Mathf.PI;
                float length = (pointA-pointB).magnitude;
                rect = new Rect(pointA.x, pointA.y, length, width);

//                MyLine line = new MyLine();
//                line.angle = angle; line.rect = rect;
//                myLines.Add(key, line);

                // remove unsused lines
//            }
            GUIUtility.RotateAroundPivot(angle, pointA);
            GUI.DrawTexture(rect, lineTex);

            // We're done.  Restore the GUI matrix and GUI color to whatever they were before.
            GUI.matrix = savedMatrix;
            GUI.color = savedColor;
        }
    }
}

