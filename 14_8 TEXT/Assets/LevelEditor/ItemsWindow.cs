//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEditor;
using UnityEngine;
using System.Threading;
using System.Collections;
using System.Collections.Generic;
using AssemblyCSharp.Level;

namespace AssemblyCSharp
{
    public class ItemsWindow : EditorWindow
    {
        public static ItemsWindow Instance { get; private set; }
        public static bool IsOpen {
            get { return Instance != null; }
        }
        void OnEnable() {
            Instance = this;
        }
        public ItemsWindow() { }

        
        static Texture2D img = null;
        static public GUIStyle activeStyle = new GUIStyle();

        
        bool itemsFileEnable;
        string dir = "C:\\Users\\Admin\\Desktop\\Level\\";
        string name = "items1";

        string itemsFile = "C:\\Users\\Admin\\Desktop\\Level\\items1.xml";

        
        
        List<ItemTemplate> items = new List<ItemTemplate>();
        bool useIds = true;
        Vector2 itemListScroll;



        public static void ShowWindow() {
            EditorWindow w = EditorWindow.GetWindow(typeof(ItemsWindow));
            setupWindow();
            w.title = "Items";
            w.Show();
        }

        public static void CloseWindow() {
            EditorWindow w = EditorWindow.GetWindow(typeof(ItemsWindow));
            w.Close();
        }

        public static void setupWindow(){
            img = Resources.Load<Texture2D>("black1x2i");
            //Show existing window instance. If one doesn't exist, make one.
            
            activeStyle = new GUIStyle();
            activeStyle.border = new RectOffset(2,2,2,2);
            GUIStyleState slate = new GUIStyleState();
            slate.background = img;
            
            activeStyle.normal = slate;
            activeStyle.active = slate;
            activeStyle.focused = slate;
        }
        
        void loadItemList(string path) {
            ItemList dt = TextLoader.loadXmlFile<ItemList>(path);

            resetItemList();
            items = dt.items;
            nextId = dt.lastId;
        }

        void resetItemList() {
            items = new List<ItemTemplate>();
        }
        
        void saveItemList(string path) {
            TextLoader.saveFile(path, getItemListText());
        }

        string getItemListText() {
            ItemList il = new ItemList(items);
            il.lastId = nextId;
            string xml = TextLoader.saveAsXml(il);
            return xml;
        }
       

        void OnGUI() {
            if(img == null){
                setupWindow();
            }

            // items file
            itemsFileEnable = EditorGUILayout.BeginToggleGroup ("Items File", itemsFileEnable);
            itemsFile = EditorGUILayout.TextField ( itemsFile );
            EditorGUILayout.EndToggleGroup ();

            // load save
            EditorGUILayout.BeginHorizontal(GUILayout.MaxWidth(75));
            if(GUILayout.Button("Open")){
                string  path = EditorUtility.OpenFilePanel(
                    "Open Items XML",
                    dir,
                    "xml");
                if(path.Length != 0) {
                    itemsFile = path;
                    // load file
                    loadItemList(itemsFile);
                }
            }
            if(GUILayout.Button("Refresh")){
                if(EditorUtility.DisplayDialog(
                    "Refresh from File?", "You will loose any un-saved work!", "Yes, Refresh", "Cancel") ){
                    
                    // load file
                    loadItemList(itemsFile);
                }
            }

            EditorGUILayout.Separator();

            if(GUILayout.Button("Save", GUILayout.MaxWidth(100))){
                if(EditorUtility.DisplayDialog(
                    "Save File?", "File will be overridden:\n" + itemsFile, "Ok", "Cancel") ){
                    // save file
                    saveItemList(itemsFile);
                }

            }

            if(GUILayout.Button("Save As..", GUILayout.MaxWidth(100))){
                string  path = EditorUtility.SaveFilePanel(
                    "Save Items as XML",
                    dir,
                    name + ".xml",
                    "xml");
                
                if(path.Length != 0) {
                    itemsFile = path;
                    saveItemList(itemsFile);
                }
            }
            EditorGUILayout.EndHorizontal();
            

            
            
            EditorGUILayout.Separator();
            //-----------------------------
            
            
            
            EditorGUILayout.BeginHorizontal();
            EditorGUILayout.Space();
            
            drawItemsPane();
            
            EditorGUILayout.Space();            
            EditorGUILayout.EndHorizontal();
        }


        void drawItemsPane() {
            EditorGUILayout.BeginVertical();
            
            if(items==null){
                items = new List<ItemTemplate>();
            }
            
            GUILayout.Label ("Items", EditorStyles.boldLabel);
            
            // add button
            if(GUILayout.Button("Add", GUILayout.MaxWidth(100))){
                long id = getNextId();
                ItemTemplate dc = new ItemTemplate(id, "New Item"+id);
                addItem(dc);
            }
            
            // colapse all
            if(GUILayout.Button("Colapse All", GUILayout.MaxWidth(100))){
                for(int i = 0; i < items.Count; ++i){
                    items[i].isUnFolded = true;
                }
            }
            
            // delete button
            if(GUILayout.Button("Delete", GUILayout.MaxWidth(100))){
                deleteCheckedItems();
            }
            
            // use labels
            EditorGUILayout.Separator();
            if(GUILayout.Button(useIds?"Use Labels":"Use Ids", GUILayout.MaxWidth(75))){
                useIds = !useIds;
            }
            
            // all dialog content
            itemListScroll = EditorGUILayout.BeginScrollView(itemListScroll);
            EditorGUILayout.BeginVertical();
            for(int i = 0; i < items.Count; ++i){
                drawItem(items[i], i);
            }
            EditorGUILayout.EndVertical();
            EditorGUILayout.EndScrollView();
            
            EditorGUILayout.EndVertical();
        }

        void addItem(ItemTemplate dc) {
            items.Add(dc);
        }

        void deleteCheckedItems() {
            for(int i = 0; i < items.Count; ++i){
                if(items[i].isChecked){
                    items.RemoveAt(i);
                    
                    deleteCheckedItems();
                    break;
                }
            }
        }

        void drawItem(ItemTemplate item, int i) {
            EditorGUILayout.BeginVertical();
            
            EditorGUILayout.Space();
            EditorGUILayout.Separator();
            
            EditorGUILayout.BeginHorizontal(GUILayout.MaxWidth(100));
            item.isChecked = EditorGUILayout.Toggle(item.isChecked, GUILayout.ExpandWidth(false));
            item.isUnFolded = EditorGUILayout.Foldout(item.isUnFolded, useIds ? item.id.ToString() : item.name);
            EditorGUILayout.EndHorizontal();
            
            if(item.isUnFolded){
                EditorGUILayout.TextField ("Id: ", item.id.ToString(), GUILayout.MaxWidth(200));
                
                item.name = EditorGUILayout.TextField ("Name: ", item.name, 
                                                       GUILayout.MaxWidth(400),
                                                       GUILayout.ExpandWidth(false));

                item.script = EditorGUILayout.TextField ("Script: ", item.script, 
                                                       GUILayout.MaxWidth(400),
                                                       GUILayout.ExpandWidth(false));

                item.sTarget = EditorGUILayout.TextField ("Target: ", item.sTarget, 
                                                         GUILayout.MaxWidth(400),
                                                         GUILayout.ExpandWidth(false));

                // attributes
                // is unique
                // default script 
                // AttributeTemplate.Health;
                // AttributeTemplate.ScriptName;
                // AttributeTemplate.ScriptTarget;

                /*
                 * door
                 * 
                 * name: door
                 * action: move to area
                 * target: areax
                 * desc: A door to the west.
                 * 
                 * no health, no pickup, no move, etc
                 * */

//                item.foldContent = EditorGUILayout.Foldout(item.foldContent, trim(item.content, 20));
//                if(item.foldContent){
//                    item.content = EditorGUILayout.TextArea (item.content);
//                }
            }
            
            EditorGUILayout.EndVertical();
        }

        long nextId = 0;
        long getNextId() {
            return nextId++;
        }


    }
}

