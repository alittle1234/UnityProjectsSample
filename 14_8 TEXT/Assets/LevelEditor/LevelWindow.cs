//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEditor;
using UnityEngine;
using System.Threading;
using System.Collections;
using System.Collections.Generic;
using System.Reflection;

using AssemblyCSharp.Level;

namespace AssemblyCSharp
{
    public class LevelWindow : EditorWindow
    {
        public static LevelWindow Instance { get; private set; }
        public static bool IsOpen {
            get { return Instance != null; }
        }
        void OnEnable() {
            Instance = this;
        }
        public LevelWindow() { }
        
        
        static Texture2D img = null;
        static public GUIStyle activeStyle = new GUIStyle();
        
        
        bool levelFileEnable;
        string levelFile = "C:\\Users\\Admin\\Desktop\\Level\\level1.xml";

        string textDir = "C:\\Users\\Admin\\Desktop\\Level\\";
        string textName = "text1";
        string curTextFile = "C:\\Users\\Admin\\Desktop\\Level\\text1.xml";
        
        
        
        Level.Level level = new Level.Level();
        bool useIds = true;
        Vector2 itemListScroll;
        
        
        
        public static void ShowWindow() {
            EditorWindow w = EditorWindow.GetWindow(typeof(LevelWindow));
            setupWindow();
            w.title = "Level";
            w.Show();
        }
        
        public static void CloseWindow() {
            EditorWindow w = EditorWindow.GetWindow(typeof(LevelWindow));
            w.Close();
        }
        
        public static void setupWindow(){
            img = Resources.Load<Texture2D>("black1x2i");
            //Show existing window instance. If one doesn't exist, make one.
            
            activeStyle = new GUIStyle();
            activeStyle.border = new RectOffset(2,2,2,2);
            GUIStyleState slate = new GUIStyleState();
            slate.background = img;
            
            activeStyle.normal = slate;
            activeStyle.active = slate;
            activeStyle.focused = slate;
        }
        
        void loadLevel() {
            Level.Level lv = TextLoader.loadXmlFile<Level.Level>(levelFile);
            
            resetLevel();
            level = lv;
            nextId = lv.lastId;
        }
        
        void resetLevel() {
            level = new Level.Level();
            nextId = level.lastId;
        }
        void resetText() {
        }
        
        void saveLevel() {
            TextLoader.saveFile(levelFile, getLevelText());
        }
        
        string getLevelText() {
            level.lastId = nextId;
            string xml = TextLoader.saveAsXml(level);

            return xml;
        }
        
        
        void OnGUI() {
            if(img == null){
                setupWindow();
            }
            
            // items file
            levelFileEnable = EditorGUILayout.BeginToggleGroup ("Level File", levelFileEnable);
            levelFile = EditorGUILayout.TextField ( levelFile );
            EditorGUILayout.EndToggleGroup ();
            
            // load save
            EditorGUILayout.BeginHorizontal(GUILayout.MaxWidth(75));
            if(GUILayout.Button("Load")){
                // load file
                loadLevel();
            }
            if(GUILayout.Button("Save", GUILayout.MaxWidth(100))){
                // save file
                saveLevel();
            }
            EditorGUILayout.EndHorizontal();
            EditorGUILayout.Separator();
            
            drawOpenRefreshSaveText();
            
            
            EditorGUILayout.Separator();
            //-----------------------------
            
            
            
            EditorGUILayout.BeginHorizontal();
            EditorGUILayout.Space();
            
            drawLevelPane();
            
            EditorGUILayout.Space();            
            EditorGUILayout.EndHorizontal();
        }
        
        
        void drawLevelPane() {
            if(level == null || level.locations == null){
                level = new AssemblyCSharp.Level.Level();
                level.locations = new List<AssemblyCSharp.Level.Level.Location>();
            }
            EditorGUILayout.BeginVertical();
            
            GUILayout.Label ("Level", EditorStyles.boldLabel);

            // PLAYER

            // LOCATIONS
                
                // ROOMS

            // add button
            if(GUILayout.Button("Add", GUILayout.MaxWidth(100))){
                long id = getNextId();
                Level.Level.Location loc = new Level.Level.Location();
                loc.varname = "location"+id;
                loc.title_txt = "location_title"+id;
                level.locations.Add(loc);
            }
            
            // colapse all
            if(GUILayout.Button("Colapse All", GUILayout.MaxWidth(100))){
//                for(int i = 0; i < level.Count; ++i){
//                    level[i].isUnFolded = true;
//                }
            }
            
            // delete button
            if(GUILayout.Button("Delete", GUILayout.MaxWidth(100))){
//                deleteCheckedItems();
            }
            
            // use labels
            EditorGUILayout.Separator();
            if(GUILayout.Button(useIds?"Use Labels":"Use Ids", GUILayout.MaxWidth(75))){
                useIds = !useIds;
            }
            
            // all dialog content
            itemListScroll = EditorGUILayout.BeginScrollView(itemListScroll);
            EditorGUILayout.BeginVertical();
            if(level != null && level.locations != null){
                for(int i = 0; i < level.locations.Count; ++i){
                    drawLocation(level.locations[i]);
                }
            }
            EditorGUILayout.EndVertical();
            EditorGUILayout.EndScrollView();
            
            EditorGUILayout.EndVertical();
        }
        
        void addItem(ItemTemplate dc) {
//            level.Add(dc);
        }
        
        void deleteCheckedItems<T> (List<T> items) where T : Checkable{
            for(int i = 0; i < items.Count; ++i){
                if(items[i].isChecked){
                    items.RemoveAt(i);
                    
                    deleteCheckedItems(items);
                    break;
                }
            }
        }
        
        void drawLocation(Level.Level.Location location) {
            EditorGUILayout.BeginVertical();
            
            EditorGUILayout.Space();
            EditorGUILayout.Separator();

            EditorGUILayout.BeginHorizontal(GUILayout.MaxWidth(100));
            location.isChecked = EditorGUILayout.Toggle(location.isChecked, GUILayout.ExpandWidth(false));
            location.isUnFolded = EditorGUILayout.Foldout(location.isUnFolded,
                                                          useIds ? location.varname : location.title_txt);
            EditorGUILayout.EndHorizontal();

            if(location.isUnFolded){
                
                // add room button after collapse
                // delete room button
                // colapse, expand?

                EditorGUILayout.BeginHorizontal();
                GUILayout.Space(15);  // indent

                EditorGUILayout.BeginVertical();

                if(GUILayout.Button("Add Room", GUILayout.MaxWidth(100))){
                    long id = getNextId();
                    Level.Level.Room rom = new Level.Level.Room();
                    rom.varname = "room"+id;
                    rom.descView_txt = "room_view_"+id;
                    location.rooms.Add(rom);
                }

                for(int i = 0; i < location.rooms.Count; ++i){
                    drawRoom(location.rooms[i]);
                    EditorGUILayout.Space();
                }
                EditorGUILayout.EndVertical();

                EditorGUILayout.EndHorizontal();
            }
            
            EditorGUILayout.EndVertical();
        }

        void drawRoom(AssemblyCSharp.Level.Level.Room room) {
            EditorGUILayout.BeginHorizontal(GUILayout.ExpandWidth(false),GUILayout.MaxWidth(75));
            room.isChecked = EditorGUILayout.Toggle(room.isChecked, GUILayout.ExpandWidth(false));
            room.isUnFolded = EditorGUILayout.Foldout(room.isUnFolded,room.varname);
            EditorGUILayout.EndHorizontal();

            GUILayout.Space(5);
            if(room.isUnFolded){
                EditorGUILayout.BeginVertical();
                room.varname =  EditorGUILayout.TextField ("Varn: ", room.varname, 
                                                           GUILayout.MinWidth(50));
                EditorGUILayout.BeginHorizontal();
                room.descView_txt =  EditorGUILayout.TextField ("Desc: ", room.descView_txt );
                EditorGUILayout.EndHorizontal();
                string tContent = TextUtil.get(room.descView_txt);
                string rContent = EditorGUILayout.TextArea(tContent);
                if(!tContent.Equals(rContent)){
                    TextUtil.set(room.descView_txt, rContent);
                }

                room.showItems = EditorGUILayout.Foldout(room.showItems, "Items");
                if(room.showItems){
                    
                    // add item button after collapse
                    // delete item button
                    // colapse, expand?

                    EditorGUILayout.BeginHorizontal();
                    GUILayout.Space(15);  // indent

                    EditorGUILayout.BeginVertical();

                    EditorGUILayout.BeginHorizontal(GUILayout.MaxWidth(100));
                    if(GUILayout.Button("Add Item", GUILayout.MaxWidth(100))){
                        long id = getNextId();
                        Level.Level.Item itm = new Level.Level.Item();
                        itm.varname = "item"+id;
                        itm.itemType = "door";
                        itm.name_txt = "item_name"+id;
                        room.items.Add(itm);
                    }

                    if(GUILayout.Button("Delete", GUILayout.MaxWidth(100))){
                        deleteCheckedItems(room.items);
                    }
                    EditorGUILayout.EndHorizontal();

                    for(int i = 0; i < room.items.Count; ++i){
                        drawItem(room.items[i]);
                        EditorGUILayout.Space();
                    }
                    EditorGUILayout.EndVertical();

                    EditorGUILayout.EndHorizontal();
                }
                EditorGUILayout.EndVertical();
            }
        }

        void drawItem(Level.Level.Item item) {
            item.isChecked = EditorGUILayout.Toggle(item.isChecked, GUILayout.ExpandWidth(false));
            EditorGUILayout.BeginVertical(activeStyle);

            item.varname =  EditorGUILayout.TextField ("Varn: ", item.varname, GUILayout.MaxWidth(200));
            item.name_txt =  EditorGUILayout.TextField ("Name: ", item.name_txt, GUILayout.MaxWidth(200));
            string tContent = TextUtil.get(item.name_txt);
            string rContent = EditorGUILayout.TextArea(tContent);
            if(!tContent.Equals(rContent)){
                TextUtil.set(item.name_txt, rContent);
            }
            item.itemType =  EditorGUILayout.TextField ("Type: ", item.itemType, GUILayout.MaxWidth(200));
            EditorGUILayout.LabelField("Other Stats:");

            EditorGUILayout.EndVertical();
        }
        
        long nextId = 0;
        long getNextId() {
            return nextId++;
        }

        void loadTextFile(string curTextFile) {
            TextUtil.add(TextLoader.loadXmlFile<TextLibrary>(curTextFile));
        }
        
        void saveTextFile() {
            TextLoader.saveFile(curTextFile, TextLoader.saveAsXml(TextUtil.toTextLibrary()));
        }
        void drawOpenRefreshSaveText() {
            // load save
            EditorGUILayout.BeginHorizontal(GUILayout.MaxWidth(75));
            if(GUILayout.Button("Open")){
                string  path = EditorUtility.OpenFilePanel(
                    "Open Items XML",
                    textDir,
                    "xml");
                if(path.Length != 0) {
                    curTextFile = path;
                    
                    loadTextFile(curTextFile);
                }
            }
            if(GUILayout.Button("Refresh")){
                if(EditorUtility.DisplayDialog(
                    "Refresh from File?", "You will loose any un-saved work!", "Yes, Refresh", "Cancel") ){
                    
                    loadTextFile(curTextFile);
                }
            }
            
            EditorGUILayout.Separator();
            
            if(GUILayout.Button("Save", GUILayout.MaxWidth(100))){
                if(EditorUtility.DisplayDialog(
                    "Save File?", "File will be overridden:\n" + curTextFile, "Ok", "Cancel") ){

                    saveTextFile();
                }
                
            }
            
            if(GUILayout.Button("Save As..", GUILayout.MaxWidth(100))){
                string  path = EditorUtility.SaveFilePanel(
                    "Save Items as XML",
                    textDir,
                    textName + ".xml",
                    "xml");
                
                if(path.Length != 0) {
                    curTextFile = path;
                    saveTextFile();
                }
            }
            EditorGUILayout.EndHorizontal();
        }
    }
}

